#!/usr/bin/env python3

####################################################################
#
#  Polarssl source code generator
#
#  Copyright Â© 2014, Jumpstarter AB. This file is part of the librcd project.
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  See the COPYING file distributed with this project for more information.
#
#  SYNOPSIS:
#     cd polarssl-git-repo/
#     polar-generator /path/to/librcd
#
#  Currently based on polarssl version:
#  fc3697ce2b0fb32a622e33c3e352afd184387075 (Fri Oct 24 10:42:25 2014 +0200)
#  Tag: polarssl-1.2.12
#
####################################################################

import os
import re
import subprocess
import sys

def get_config_h_extra():
    config_h_extra = """
/* LIBRCD COMPATIBILITY START */
#include "rcd.h"
#include "linux.h"

#define _SOCKLEN_T

#define asm __asm__

// Undef colliding musl.h definitions.
#undef I
/* LIBRCD COMPATIBILITY END */
"""
    return config_h_extra

def main(librcd_path):
    if not os.path.isdir(librcd_path):
        raise Exception("please provide the librcd path as the second command line argument")
    hard_h_src_files = [
        'include/polarssl/config.h', # rcd.h linux.h
        'include/polarssl/bignum.h', # config.h
        'include/polarssl/rsa.h', # bignum
        'include/polarssl/aes.h', # no include
        'include/polarssl/arc4.h', # no include
        'include/polarssl/asn1.h', # config.h bignum.h
        'include/polarssl/asn1write.h', # asn1.h
        'include/polarssl/base64.h', # no include
        'include/polarssl/blowfish.h', # no include
        'include/polarssl/bn_mul.h', # bignum
        'include/polarssl/camellia.h', # no include
        'include/polarssl/certs.h', # no include
        'include/polarssl/cipher.h', # no include
        'include/polarssl/cipher_wrap.h', # config.h cipher.h
        'include/polarssl/ctr_drbg.h', # aes.h
        'include/polarssl/des.h', #no
        'include/polarssl/dhm.h', # bignum.h
        'include/polarssl/entropy_poll.h', # config.h
        'include/polarssl/error.h', #
        'include/polarssl/gcm.h', # aes.h
        'include/polarssl/havege.h', #
        'include/polarssl/md2.h', #
        'include/polarssl/md4.h', #
        'include/polarssl/md5.h', #
        'include/polarssl/md.h', #
        'include/polarssl/md_wrap.h', # md.h config.h
        'include/polarssl/net.h', #
        'include/polarssl/padlock.h', # aes.h
        'include/polarssl/pbkdf2.h', # md.h
        'include/polarssl/pem.h', #
        'include/polarssl/pkcs11.h', # config.h x509.h
        'include/polarssl/pkcs12.h', # md.h cipher.h asn1.h
        'include/polarssl/pkcs5.h', # md.h asn1.h
        'include/polarssl/sha1.h', # config.h
        'include/polarssl/sha256.h', # config.h
        'include/polarssl/sha512.h', # config.h
        'include/polarssl/entropy.h', # config.h sha4.h havege.h
        'include/polarssl/timing.h', #
        'include/polarssl/version.h', # config.h
        'include/polarssl/x509.h', # asn1.h rsa.h dhm.h
        'include/polarssl/xtea.h', # config.h
        'include/polarssl/ssl.h', # net.h rsa.h md5.h sha1.h sha2.h sha4.h x509.h config.h
        'include/polarssl/debug.h', # config.h ssl.h
        'include/polarssl/ssl_cache.h', # ssl.h
        'include/polarssl/openssl.h', # aes.h md5.h rsa.h sha1.h
        'include/polarssl/platform.h', # net.c
        'include/polarssl/ecp.h', # ssl.h
        'include/polarssl/ssl_ciphersuites.h', # ssl.h
        'include/polarssl/check_config.h', # config.h
        'include/polarssl/oid.h', #platform.h
        'include/polarssl/pk.h', #ssl_ciphersuites.h
        'include/polarssl/ecdsa.h', #platform.h
        'include/polarssl/x509_crt.h', #restructure
        'include/polarssl/x509_crl.h', #restructure
        'include/polarssl/x509_csr.h',#restructure
        'include/polarssl/ecdh.h', #restructure
        'include/polarssl/ripemd160.h', #restructure
        'include/polarssl/ccm.h', #restructure
        'include/polarssl/aesni.h', #restructure
        'include/polarssl/hmac_drbg.h', #restructure
        'include/polarssl/error.h', #restructure
        'include/polarssl/pk_wrap.h', #restructure
    ]

    hard_c_src_files = [
        'library/aes.c',
        'library/arc4.c',
        'library/asn1parse.c',
        'library/asn1write.c',
        'library/base64.c',
        'library/bignum.c',
        'library/blowfish.c',
        'library/camellia.c',
        'library/certs.c',
        'library/cipher.c',
        'library/cipher_wrap.c',
        'library/ctr_drbg.c',
        'library/debug.c',
        'library/des.c',
        'library/dhm.c',
        'library/entropy.c',
        'library/entropy_poll.c',
        'library/error.c',
        'library/gcm.c',
        'library/havege.c',
        'library/md2.c',
        'library/md4.c',
        'library/md5.c',
        'library/md.c',
        'library/md_wrap.c',
        'library/net.c',
        'library/padlock.c',
        'library/pbkdf2.c',
        'library/pem.c',
        'library/pkcs11.c',
        'library/pkcs12.c',
        'library/pkcs5.c',
        'library/rsa.c',
        'library/sha1.c',
        'library/sha256.c',
        'library/sha512.c',
        'library/ssl_cache.c',
        'library/ssl_cli.c',
        'library/ssl_srv.c',
        'library/ssl_tls.c',
        'library/timing.c',
        'library/version.c',
        'library/x509write_crt.c',
        'library/x509write_csr.c',
        'library/xtea.c',
        'library/aesni.c',
        'library/x509_crt.c',
        'library/x509.c',
        'library/x509_create.c',
        'library/oid.c',
        'library/ecdh.c',
        'library/pk.c',
        'library/ripemd160.c',
        'library/ecp.c',
        'library/ecp_curves.c',
        'library/ecdsa.c',
        'library/ccm.c',
        'library/pkwrite.c',
        'library/pk_wrap.c',
        'library/ssl_ciphersuites.c',
        'library/pkparse.c',
        'library/hmac_drbg.c',
    ]

    def generate_file(src_file_list, dest_path):
        for src_file in src_file_list:
            filename = os.path.basename(src_file)
            with open(src_file, 'r') as f:
                file_content = f.readlines()
                if filename == "config.h":
                    inject_pos = file_content.index('#define POLARSSL_CONFIG_H\n') + 1
                    new_file_content = "".join(file_content[:inject_pos]) + get_config_h_extra() + "".join(file_content[inject_pos:])
                    for feature in ('POLARSSL_HAVE_SSE2', 'POLARSSL_AES_ROM_TABLES', 'POLARSSL_HAVEGE_C', 'POLARSSL_SELF_TEST' ):
                        new_file_content = re.sub(r"(#define {})\n \*\/".format(feature), r" */\n\1", new_file_content)
                    new_file_content = re.sub(r"(#define POLARSSL_SELF_TEST)", r"/*\1 */ ", new_file_content)
                elif filename == "pk.h":
                    # this will be a problem if they add structs
                    new_file_content = re.sub(r"(typedef struct)\n{\n    const pk_info_t *", r"\1 _pk_context\n{\n    const pk_info_t", "".join(file_content))
                elif filename == "timing.c":
                    inject_if_pos = file_content.index("#if defined(INTEGRITY)\n")
                    file_content = file_content[:inject_if_pos] + ["#if 0 /* REMOVED FROM LIBRCD START */\n"] + file_content[inject_if_pos:]
                    inject_endif_pos = file_content.index("#endif /* INTEGRITY */\n") + 1
                    new_file_content = "".join(file_content[:inject_endif_pos]) + "#endif /* REMOVED FROM LIBRCD END */\n" + "".join(file_content[inject_endif_pos:])
                    pass
                else:
                    new_file_content = "".join(file_content)
                new_file_content = re.sub(r"(#include <.*>)", r"/*NO-SYS \1 */", new_file_content)
                print("writing: " + dest_path + "/" + filename)
                with open(dest_path + "/" + filename, "w") as df:
                    df.write(new_file_content)

    include_path = os.path.join(librcd_path, "include/polarssl")
    subprocess.check_call(["mkdir", "-p", include_path])
    generate_file(hard_h_src_files, include_path)
    src_path = os.path.join(librcd_path, "src/polarssl")
    subprocess.check_call(["mkdir", "-p", src_path])
    generate_file(hard_c_src_files, src_path)

if __name__ == "__main__":
    main(os.path.expanduser(sys.argv[1]))
